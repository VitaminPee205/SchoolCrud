/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.finalactivity;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Cpido
 */
public class Admin extends javax.swing.JFrame {

    /**
     * Creates new form Admin
     */
    public Admin() {
        initComponents();
        loadTableData();
      

    }
   private void loadTableData() {
       
      String dbURL = "jdbc:ucanaccess://C:/Users/Cpido/Documents/School.accdb";

        DefaultTableModel model = (DefaultTableModel) Jtable.getModel();
        model.setRowCount(0); // Clear existing rows

        try (Connection connection = DriverManager.getConnection(dbURL);
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery("SELECT * FROM Enrollment")) {

            while (resultSet.next()) {
                String studentID = resultSet.getString("StudentID");
                String fullName = resultSet.getString("FullName");
                String birthDate = resultSet.getString("BirthDate");
                String gender = resultSet.getString("Gender");
                String contactNumber = resultSet.getString("ContactNumber");
                String year = resultSet.getString("Year");

                model.addRow(new Object[]{studentID, fullName, birthDate, gender, contactNumber, year});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Jtable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        ID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Name = new javax.swing.JTextField();
        Birth = new javax.swing.JTextField();
        Gender = new javax.swing.JTextField();
        Contact = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        EnrollToBlockA = new javax.swing.JButton();
        Del = new javax.swing.JButton();
        Page = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        YearBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        Enrollment = new javax.swing.JButton();
        Blocka = new javax.swing.JButton();
        BlockB = new javax.swing.JButton();
        EnrollToBlockB = new javax.swing.JButton();
        Update = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Jtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "StudentID", "FullName", "BirthDate", "Gender", "Contact Number", "Year"
            }
        ));
        Jtable.setGridColor(new java.awt.Color(0, 153, 204));
        Jtable.setSelectionBackground(new java.awt.Color(242, 242, 242));
        Jtable.setSelectionForeground(new java.awt.Color(102, 102, 102));
        Jtable.setShowHorizontalLines(true);
        Jtable.setShowVerticalLines(true);
        Jtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JtableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Jtable);

        jLabel1.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ADMIN");

        ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDActionPerformed(evt);
            }
        });

        jLabel2.setText("Student ID:");

        Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameActionPerformed(evt);
            }
        });

        Birth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BirthActionPerformed(evt);
            }
        });

        Gender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenderActionPerformed(evt);
            }
        });

        Contact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContactActionPerformed(evt);
            }
        });

        jLabel3.setText("Name:");

        jLabel4.setText("Birth Date:");

        jLabel5.setText("Gender:");

        jLabel6.setText("Contact No.:");

        EnrollToBlockA.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        EnrollToBlockA.setText("Enroll to Block A");
        EnrollToBlockA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnrollToBlockAActionPerformed(evt);
            }
        });

        Del.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Del.setText("Delete");
        Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelActionPerformed(evt);
            }
        });

        Page.setText("Back To Page");
        Page.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PageActionPerformed(evt);
            }
        });

        Save.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        YearBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1st Year", "2nd Year", "3rd Year", "4th Year", " ", " " }));
        YearBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YearBoxActionPerformed(evt);
            }
        });

        jLabel8.setText("Year For Enrollment");

        Enrollment.setText("Enrollment");
        Enrollment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnrollmentActionPerformed(evt);
            }
        });

        Blocka.setText("Block A");
        Blocka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlockaActionPerformed(evt);
            }
        });

        BlockB.setText("BlockB");
        BlockB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlockBActionPerformed(evt);
            }
        });

        EnrollToBlockB.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        EnrollToBlockB.setText("Enroll to Block B");
        EnrollToBlockB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnrollToBlockBActionPerformed(evt);
            }
        });

        Update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(Page))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(EnrollToBlockA)
                                .addGap(18, 18, 18)
                                .addComponent(EnrollToBlockB))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(Save)
                                .addGap(18, 18, 18)
                                .addComponent(Update)
                                .addGap(18, 18, 18)
                                .addComponent(Del))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(Contact, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGap(1, 1, 1)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(ID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(Birth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(93, 93, 93)
                                            .addComponent(Gender, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 108, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(247, 247, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(30, 30, 30)
                                .addComponent(YearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Enrollment)
                        .addGap(18, 18, 18)
                        .addComponent(Blocka)
                        .addGap(18, 18, 18)
                        .addComponent(BlockB))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Page)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Birth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(Contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(YearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Del)
                    .addComponent(Save)
                    .addComponent(Update)
                    .addComponent(Enrollment)
                    .addComponent(Blocka)
                    .addComponent(BlockB))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EnrollToBlockB)
                    .addComponent(EnrollToBlockA))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDActionPerformed

    private void NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameActionPerformed

    private void JtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JtableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tblModel=(DefaultTableModel)Jtable.getModel();
        String tblStudentID = tblModel.getValueAt(Jtable.getSelectedRow(),0).toString();
        String tblFullName = tblModel.getValueAt(Jtable.getSelectedRow(),1).toString();
        String tblBirthDate = tblModel.getValueAt(Jtable.getSelectedRow(),2).toString();
        String tblGender = tblModel.getValueAt(Jtable.getSelectedRow(),3).toString();
        String tblContactNumber = tblModel.getValueAt(Jtable.getSelectedRow(),4).toString();
        String tblYear = tblModel.getValueAt(Jtable.getSelectedRow(),5).toString();

        ID.setText(tblStudentID);
        Name.setText(tblFullName);
        Birth.setText(tblBirthDate);
        Gender.setText(tblGender);
        Contact.setText(tblContactNumber);
      
    }//GEN-LAST:event_JtableMouseClicked

    private void DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelActionPerformed
    DefaultTableModel tblModel = (DefaultTableModel) Jtable.getModel();
 

    // Check if a row is selected
    if (Jtable.getSelectedRowCount() == 1) {
        // Get the StudentID of the selected row
        String studentID = tblModel.getValueAt(Jtable.getSelectedRow(), 0).toString();

        // Get the table name (BlockA or BlockB)
        String tableName = getTableNameForStudent(studentID);

        // Remove the selected row from the JTable
        tblModel.removeRow(Jtable.getSelectedRow());

        // Database connection and deletion
        String dbURL = "jdbc:ucanaccess://C:/Users/Cpido/Documents/School.accdb";

        try (Connection connection = DriverManager.getConnection(dbURL);
             Statement statement = connection.createStatement()) {

            // Execute DELETE query based on the student's table (BlockA or BlockB)
            String sql = "DELETE FROM " + tableName + " WHERE StudentID = '" + studentID + "'";
            int rowsDeleted = statement.executeUpdate(sql);
            loadTableData();  

            // Display feedback
            if (rowsDeleted > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Record deleted successfully from " + tableName + ".");
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to delete record from " + tableName + ".");
            }
        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Error: Unable to delete record from database.");
        }
    } else {
        if (Jtable.getRowCount() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Table is Empty.");
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a single row to delete.");
        }
    }
    }//GEN-LAST:event_DelActionPerformed

private String getTableNameForStudent(String studentID) {
    String tableName = "";
    String dbURL = "jdbc:ucanaccess://C:/Users/Cpido/Documents/School.accdb";

    try (Connection connection = DriverManager.getConnection(dbURL)) {
        // Check BlockA table
        String sqlBlockA = "SELECT COUNT(*) FROM BlockA WHERE StudentID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sqlBlockA)) {
            preparedStatement.setString(1, studentID);
            try (ResultSet rsBlockA = preparedStatement.executeQuery()) {
                if (rsBlockA.next() && rsBlockA.getInt(1) > 0) {
                    tableName = "BlockA";
                }
            }
        }

        // If not in BlockA, check BlockB
        if (tableName.isEmpty()) {
            String sqlBlockB = "SELECT COUNT(*) FROM BlockB WHERE StudentID = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sqlBlockB)) {
                preparedStatement.setString(1, studentID);
                try (ResultSet rsBlockB = preparedStatement.executeQuery()) {
                    if (rsBlockB.next() && rsBlockB.getInt(1) > 0) {
                        tableName = "BlockB";
                    }
                }
            }
        }

        // If not in BlockB, check Enrollment
        if (tableName.isEmpty()) {
            String sqlEnrollment = "SELECT COUNT(*) FROM Enrollment WHERE StudentID = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sqlEnrollment)) {
                preparedStatement.setString(1, studentID);
                try (ResultSet rsEnrollment = preparedStatement.executeQuery()) {
                    if (rsEnrollment.next() && rsEnrollment.getInt(1) > 0) {
                        tableName = "Enrollment";
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: Unable to retrieve student table information.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }

    return tableName;
}
    private void EnrollToBlockAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnrollToBlockAActionPerformed
  // Get the field values
    String studentID = ID.getText();
    String fullName = Name.getText();
    String birthDate = Birth.getText();
    String gender = Gender.getText();
    String contactNumber = Contact.getText();
    String year = YearBox.getSelectedItem().toString();

    if (studentID.isEmpty() || fullName.isEmpty() || birthDate.isEmpty() || gender.isEmpty() || contactNumber.isEmpty() || year.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill out all fields before transferring the student.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String databaseURL = "jdbc:ucanaccess://C:/Users/Cpido/Documents/School.accdb";

    try (Connection connection = DriverManager.getConnection(databaseURL)) {

        // Insert the student into BlockA table
        String insertSQL = "INSERT INTO BlockA (StudentID, FullName, BirthDate, Gender, ContactNumber, Year) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement insertStatement = connection.prepareStatement(insertSQL);
        insertStatement.setString(1, studentID);
        insertStatement.setString(2, fullName);
        insertStatement.setString(3, birthDate);
        insertStatement.setString(4, gender);
        insertStatement.setString(5, contactNumber);
        insertStatement.setString(6, year);

        int rowsInserted = insertStatement.executeUpdate();

        if (rowsInserted > 0) {
            // Delete the student from BlockB table (if exists)
            String deleteSQLBlockB = "DELETE FROM BlockB WHERE StudentID = ?";
            PreparedStatement deleteStatementBlockB = connection.prepareStatement(deleteSQLBlockB);
            deleteStatementBlockB.setString(1, studentID);
            deleteStatementBlockB.executeUpdate();

            // Delete the student from Enrollment table
            String deleteSQLEnrollment = "DELETE FROM Enrollment WHERE StudentID = ?";
            PreparedStatement deleteStatementEnrollment = connection.prepareStatement(deleteSQLEnrollment);
            deleteStatementEnrollment.setString(1, studentID);

            int rowsDeleted = deleteStatementEnrollment.executeUpdate();
            if (rowsDeleted > 0) {
                connection.commit(); // Commit transaction
                JOptionPane.showMessageDialog(this, "Student transferred to BlockA and removed from Enrollment table.");
                loadTableData();
            } else {
                JOptionPane.showMessageDialog(this, "Successfully Transfered the Student To Block B");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Failed to save the student to BlockA table.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }  


    }//GEN-LAST:event_EnrollToBlockAActionPerformed

    private void PageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PageActionPerformed
     Page page = new Page();
        page.show();
        dispose();         // TODO add your handling code here:
    }//GEN-LAST:event_PageActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
 Function enrollment = new Function();


    enrollment.setFullName(Name.getText());
    enrollment.setBirthDate(Birth.getText());
    enrollment.setGender(Gender.getText());
    enrollment.setContactNumber(Contact.getText());
    enrollment.setYear(YearBox.getSelectedItem().toString());
    enrollment.setStudentID(ID.getText());

    String databaseURL = "jdbc:ucanaccess://C:/Users/Cpido/Documents/School.accdb";

    try {
        // Validate and generate Student ID if necessary
        enrollment.validateAndGenerateStudentID();

        // Save data to the database
        enrollment.saveToDatabase(databaseURL);

        // Notify success and refresh table
        JOptionPane.showMessageDialog(this, "Data saved successfully with Student ID: " + enrollment.getStudentID());
        loadTableData();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Validation or Database Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    
    }    }//GEN-LAST:event_SaveActionPerformed

    private void YearBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YearBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_YearBoxActionPerformed
private boolean isEnrollmentTableVisible = false; // Toggle state variable
    private void EnrollmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnrollmentActionPerformed
      
          if (isEnrollmentTableVisible) {
        // Hide the table
        Jtable.setVisible(false);
        isEnrollmentTableVisible = false;
    } else {
        // Show the table and load data from the database
        Jtable.setVisible(true);
        loadTableData();
        isEnrollmentTableVisible = true;
    }
        

     
  
    }//GEN-LAST:event_EnrollmentActionPerformed

    private void BlockaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlockaActionPerformed
          // Database connection details
    String databaseURL = "jdbc:ucanaccess://C:/Users/Cpido/Documents/School.accdb";

    try (Connection connection = DriverManager.getConnection(databaseURL)) {
        // SQL query to fetch data from the BlockA table
        String sql = "SELECT * FROM BlockA";
        PreparedStatement preparedStatement = connection.prepareStatement(sql);

        // Execute the query
        ResultSet resultSet = preparedStatement.executeQuery();

        // Create a table model and set it to the JTable
        DefaultTableModel tableModel = (DefaultTableModel) Jtable.getModel();
        tableModel.setRowCount(0); // Clear existing data

        // Retrieve and add data to the table model
        while (resultSet.next()) {
            String studentID = resultSet.getString("StudentID");
            String fullName = resultSet.getString("FullName");
            String birthDate = resultSet.getString("BirthDate");
            String gender = resultSet.getString("Gender");
            String contactNumber = resultSet.getString("ContactNumber");
            String year = resultSet.getString("Year");

            // Add a row to the table
            tableModel.addRow(new Object[]{studentID, fullName, birthDate, gender, contactNumber, year});
        }
    } catch (Exception e) {
        // Handle errors and display a message
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error: Unable to retrieve data from BlockA table.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_BlockaActionPerformed

    private void EnrollToBlockBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnrollToBlockBActionPerformed
       // Get the field values
    String studentID = ID.getText();
    String fullName = Name.getText();
    String birthDate = Birth.getText();
    String gender = Gender.getText();
    String contactNumber = Contact.getText();
    String year = YearBox.getSelectedItem().toString();

    if (studentID.isEmpty() || fullName.isEmpty() || birthDate.isEmpty() || gender.isEmpty() || contactNumber.isEmpty() || year.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill out all fields before transferring the student.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String databaseURL = "jdbc:ucanaccess://C:/Users/Cpido/Documents/School.accdb";

    try (Connection connection = DriverManager.getConnection(databaseURL)) {

        // Insert the student into BlockB table
        String insertSQL = "INSERT INTO BlockB (StudentID, FullName, BirthDate, Gender, ContactNumber, Year) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement insertStatement = connection.prepareStatement(insertSQL);
        insertStatement.setString(1, studentID);
        insertStatement.setString(2, fullName);
        insertStatement.setString(3, birthDate);
        insertStatement.setString(4, gender);
        insertStatement.setString(5, contactNumber);
        insertStatement.setString(6, year);

        int rowsInserted = insertStatement.executeUpdate();

        if (rowsInserted > 0) {
            // Delete the student from BlockA table (if exists)
            String deleteSQLBlockA = "DELETE FROM BlockA WHERE StudentID = ?";
            PreparedStatement deleteStatementBlockA = connection.prepareStatement(deleteSQLBlockA);
            deleteStatementBlockA.setString(1, studentID);
            deleteStatementBlockA.executeUpdate();

            // Delete the student from Enrollment table
            String deleteSQLEnrollment = "DELETE FROM Enrollment WHERE StudentID = ?";
            PreparedStatement deleteStatementEnrollment = connection.prepareStatement(deleteSQLEnrollment);
            deleteStatementEnrollment.setString(1, studentID);

            int rowsDeleted = deleteStatementEnrollment.executeUpdate();
            if (rowsDeleted > 0) {
                connection.commit(); // Commit transaction
                JOptionPane.showMessageDialog(this, "Student transferred to BlockB and removed from Enrollment table.");
                loadTableData();
            } else {
                JOptionPane.showMessageDialog(this, "Successfully Transfered the Student To Block B");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Failed to save the student to BlockB table.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }  
    }//GEN-LAST:event_EnrollToBlockBActionPerformed

    private void BlockBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlockBActionPerformed
  // Database connection details
    String databaseURL = "jdbc:ucanaccess://C:/Users/Cpido/Documents/School.accdb";

    try (Connection connection = DriverManager.getConnection(databaseURL)) {
        // SQL query to fetch data from the BlockB table
        String sql = "SELECT * FROM BlockB";
        PreparedStatement preparedStatement = connection.prepareStatement(sql);

        // Execute the query
        ResultSet resultSet = preparedStatement.executeQuery();

        // Create a table model and set it to the JTable
        DefaultTableModel tableModel = (DefaultTableModel) Jtable.getModel();
        tableModel.setRowCount(0); // Clear existing data

        // Retrieve and add data to the table model
        while (resultSet.next()) {
            String studentID = resultSet.getString("StudentID");
            String fullName = resultSet.getString("FullName");
            String birthDate = resultSet.getString("BirthDate");
            String gender = resultSet.getString("Gender");
            String contactNumber = resultSet.getString("ContactNumber");
            String year = resultSet.getString("Year");

            // Add a row to the table
            tableModel.addRow(new Object[]{studentID, fullName, birthDate, gender, contactNumber, year});
        }

      
    } catch (Exception e) {
        // Handle errors and display a message
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: Unable to retrieve data from BlockB table.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }    
    }//GEN-LAST:event_BlockBActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
      // Retrieve field values from the UI
    String studentID = ID.getText();
    String fullName = Name.getText();
    String birthDate = Birth.getText();
    String gender = Gender.getText();
    String contactNumber = Contact.getText();
    String year = YearBox.getSelectedItem().toString();

    // Validate inputs
    if (studentID.isEmpty() || fullName.isEmpty() || birthDate.isEmpty() || gender.isEmpty() || contactNumber.isEmpty()) {
        JOptionPane.showMessageDialog(this, "All fields must be filled except StudentID.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try (Connection connection = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/Cpido/Documents/School.accdb")) {
        // Check if the StudentID exists in the Enrollment table
        String checkQuery = "SELECT COUNT(*) FROM Enrollment WHERE StudentID = ?";
        try (PreparedStatement checkStmt = connection.prepareStatement(checkQuery)) {
            checkStmt.setString(1, studentID);
            try (ResultSet rs = checkStmt.executeQuery()) {
                if (rs.next() && rs.getInt(1) == 0) {
                    // If StudentID is not found in Enrollment table
                    JOptionPane.showMessageDialog(this, "Student ID not found in the Enrollment table.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }

        // Update the student's details in the Enrollment table
        String updateQuery = "UPDATE Enrollment SET FullName = ?, BirthDate = ?, Gender=? , ContactNumber = ?, Year = ? WHERE StudentID = ?";
        try (PreparedStatement updateStmt = connection.prepareStatement(updateQuery)) {
            updateStmt.setString(1, fullName);
            updateStmt.setString(2, birthDate);
            updateStmt.setString(3, gender);
            updateStmt.setString(4, contactNumber);
            updateStmt.setString(5, year);
            updateStmt.setString(6, studentID);

            int rowsUpdated = updateStmt.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Student details updated successfully in the Enrollment table.", "Success", JOptionPane.INFORMATION_MESSAGE);
                // Optionally refresh the table data in the UI
               loadTableData();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update student details.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (Exception e) {
         e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred while updating student details.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_UpdateActionPerformed

    private void BirthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BirthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BirthActionPerformed

    private void GenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GenderActionPerformed

    private void ContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ContactActionPerformed
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Birth;
    private javax.swing.JButton BlockB;
    private javax.swing.JButton Blocka;
    private javax.swing.JTextField Contact;
    private javax.swing.JButton Del;
    private javax.swing.JButton EnrollToBlockA;
    private javax.swing.JButton EnrollToBlockB;
    private javax.swing.JButton Enrollment;
    private javax.swing.JTextField Gender;
    private javax.swing.JTextField ID;
    private javax.swing.JTable Jtable;
    private javax.swing.JTextField Name;
    private javax.swing.JButton Page;
    private javax.swing.JButton Save;
    private javax.swing.JButton Update;
    private javax.swing.JComboBox<String> YearBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
